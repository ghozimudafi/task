import React, { createContext, useState, ReactNode, useContext } from "react"

interface DataItem {
  field1: string
  field2: string
  field3: string
}

interface DataContextProps {
  savedData: DataItem[]
  addData: (data: DataItem) => void
}

const DataContext = createContext<DataContextProps | undefined>(undefined)

export const DataProvider: React.FC<{ children: ReactNode }> = ({
  children,
}) => {
  const [savedData, setSavedData] = useState<DataItem[]>([])

  const addData = (data: DataItem) => {
    setSavedData((prevData) => [...prevData, data])
  }

  return (
    <DataContext.Provider value={{ savedData, addData }}>
      {children}
    </DataContext.Provider>
  )
}

export const useDataContext = (): DataContextProps => {
  const context = useContext(DataContext)
  if (!context) {
    throw new Error("useDataContext must be used within a DataProvider")
  }
  return context
}

export default DataContext